digraph {
graph [layout="dot",rankdir="LR"];
"18094456128" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="56 bytes
1 object, 56 bytes reachable
this object in no reference cycles
c.l.LongRange
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: start (long) 32
32: end (long) 1000
40: step (long) 1
48: count (int) 968
val maybe realizes if str'ed",shape="box"];
"18094454080" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="32 bytes
41 objects, 1144 bytes reachable
this object in no reference cycles
c.l.ChunkedCons
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: chunk (ref) ->
28: _more (ref) ->
val maybe realizes if str'ed",shape="box"];
"18094455680" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="32 bytes
6 objects, 176 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) ->
20: sv (ref) nil
24: s (ref) nil
28: lock (ref) ->
val maybe realizes if str'ed",shape="box"];
"18094454528" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="144 bytes
33 objects, 912 bytes reachable
this object in no reference cycles
array of 32 j.l.Object

[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2 ...",shape="box"];
"18094456704" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="16 bytes
2 objects, 48 bytes reachable
this object in no reference cycles
j.u.c.locks.ReentrantLock
12: sync (ref) ->
val maybe realizes if str'ed",shape="box"];
"18094456832" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="32 bytes
1 object, 32 bytes reachable
this object in no reference cycles
j.u.c.locks.ReentrantLock$NonfairSync
12: exclusiveOwnerThread (ref) nil
16: state (int) 0
20: head (ref) nil
24: tail (ref) nil
val maybe realizes if str'ed",shape="box"];
"18094453824" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,style="filled","my-unique-total-size"=1176,"my-unique-num-reachable-nodes"=42,label="32 bytes
42 objects, 1176 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) nil
20: sv (ref) nil
24: s (ref) ->
28: lock (ref) nil
val maybe realizes if str'ed",shape="box"];
"18094456576" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="16 bytes
1 object, 16 bytes reachable
this object in no reference cycles
user$fn__10278
12: __methodImplCache (ref) nil
val maybe realizes if str'ed",shape="box"];
"18094455936" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="24 bytes
3 objects, 96 bytes reachable
this object in no reference cycles
clojure.core$map$fn__5954
12: __methodImplCache (ref) nil
16: coll (ref) ->
20: f (ref) ->
val maybe realizes if str'ed",shape="box"];
"18094454336" ["reachable-only-from"=18094453824,"scc-num-nodes"=1,label="24 bytes
34 objects, 936 bytes reachable
this object in no reference cycles
c.l.ArrayChunk
12: off (int) 0
16: end (int) 32
20: array (ref) ->
val maybe realizes if str'ed",shape="box"];
"18094454080" -> "18094454336" ["field-name"="chunk",label="chunk"];
"18094454080" -> "18094455680" ["field-name"="_more",label="_more"];
"18094455680" -> "18094455936" ["field-name"="fn",label="fn"];
"18094455680" -> "18094456704" ["field-name"="lock",label="lock"];
"18094456704" -> "18094456832" ["field-name"="sync",label="sync"];
"18094453824" -> "18094454080" ["field-name"="s",label="s"];
"18094455936" -> "18094456128" ["field-name"="coll",label="coll"];
"18094455936" -> "18094456576" ["field-name"="f",label="f"];
"18094454336" -> "18094454528" ["field-name"="array",label="array"];
} 